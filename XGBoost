import pandas as pd
import numpy as np
import requests
from xgboost import XGBClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from ccxt.base.errors import InvalidOrder
import time
import talib
import ccxt
import warnings
from datetime import datetime, timedelta
from ta.volatility import AverageTrueRange
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import make_scorer, accuracy_score
import os
import sys
warnings.filterwarnings("ignore")

api_key = ""
api_secret = ""

# Initialize Binance API
exchange = ccxt.binance({
    'apiKey': api_key,
    'secret': api_secret,
    'options': {
        'defaultType': 'future',  # Use the futures API
        'leverage': 20  # Set the default leverage to 20x
    },
})


def find_best_pairs():
    # Set the endpoint for the Binance API
    url = "https://fapi.binance.com/fapi/v1/ticker/24hr"

    # Get the data from the API
    response = requests.get(url)

    # Parse the JSON data
    data = response.json()

    # Define the rolling period in seconds
    period = 60

    # List of excluded coins
    excluded_coins = []

    # Filter out coins with low volume or that are on the excluded list
    filtered_data = [pair for pair in data if pair["symbol"].endswith("USDT") and float(pair["quoteVolume"]) > np.mean([float(p["quoteVolume"]) for p in data if p["symbol"].endswith("USDT")]) and not any(coin in pair["symbol"] for coin in excluded_coins)]

    # Calculate the percent change over the rolling 1-hour period for each coin
    percent_changes = [(pair["symbol"], ((float(pair["lastPrice"]) - float(pair["openPrice"])) / float(pair["openPrice"])) * 100) for pair in filtered_data]

    # Sort the pairs by percent change in descending order
    sorted_pairs = sorted(percent_changes, key=lambda x: x[1], reverse=True)

    # Format the pairs as a list of strings in the format "PAIR/USDT"
    formatted_pairs = [f"{pair[0][:-4]}/USDT" for pair in sorted_pairs]

    # Return the top 3 pairs
    return formatted_pairs[:3]


# Define asset list
symbols = find_best_pairs() # Don't like the results? set it manually ['ETH/USDT', 'BTC/USDT', 'ARB/USDT']
print(symbols)
timeframe = '1h'

ticker_data = {}
for symbol in symbols:
    ticker_data[symbol] = exchange.fetch_ticker(symbol)


def restart_program():
    python = sys.executable
    os.execl(python, python, *sys.argv)


def fetch_data(symbol, timeframe):
    ohlcv_data = exchange.fetch_ohlcv(symbol, timeframe)
    df = pd.DataFrame(ohlcv_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    return df


def preprocess_data(df):
    # Add technical indicators
    df['rsi'] = talib.RSI(df['close'], timeperiod=14)
    df['wt'] = talib.WILLR(df['high'], df['low'], df['close'], timeperiod=10)
    df['cci'] = talib.CCI(df['high'], df['low'], df['close'], timeperiod=20)
    #df['macd'], _, _ = talib.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
    df['ema_200'] = talib.EMA(df['close'], timeperiod=200)
    df['sma_200'] = talib.SMA(df['close'].values, timeperiod=200)
    #df['bbands_upper'], _, bbands_lower = talib.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2)
    df['adx'] = talib.ADX(df['high'], df['low'], df['close'], timeperiod=20)

    # Calculate Fibonacci Retracement levels
    num_levels = 4  # Number of retracement levels to calculate
    fib_levels = np.linspace(0, 1, num_levels+1)[1:-1]  # Calculate levels as a fraction of range
    max_price = df['close'].max()
    min_price = df['close'].min()
    fib_values = [min_price + level * (max_price - min_price) for level in fib_levels]

    # Add feature engineering
    #df['bbands_width'] = df['bbands_upper'] - bbands_lower
    df['price_vs_ema'] = df['close'] / df['ema_200']
    df['price_vs_sma'] = df['close'] / df['sma_200']
    #df['macd_diff'] = df['macd'] - df['close'].rolling(window=20).mean()

    # Add Fibonacci-based features
    for i in range(len(fib_values) - 1):
        df[f'fib_{i}'] = ((df['close'] - fib_values[i]) / (fib_values[i + 1] - fib_values[i])).clip(0, 1)

    # Remove rows with missing values
    df.dropna(inplace=True)

    # Scale the features
    scaler = MinMaxScaler()
    X = df[['rsi', 'wt', 'cci', 'adx', 'price_vs_ema', 'price_vs_sma'] + [f'fib_{i}' for i in range(len(fib_values) - 1)]]
    X_scaled = scaler.fit_transform(X)

    # Generate labels
    y = np.sign(df['close'].pct_change().shift(-1))
    y[y < 0] = 0
    y = y[:-1]
    X_scaled = X_scaled[:-1]

    return X_scaled, y


# Fetch data for each symbol and preprocess it
data_frames = []
for symbol in symbols:
    df = fetch_data(symbol, timeframe)
    df['symbol'] = symbol  # Add symbol column
    data_frames.append(df)

X = []
y = []
for df in data_frames:
    X_temp, y_temp = preprocess_data(df)
    X.append(X_temp)
    y.append(y_temp)

# Concatenate X and y arrays
X = np.concatenate(X, axis=0)
y = np.concatenate(y, axis=0)


def lorentzian_distance(x, y):
    return np.sqrt(np.sum(np.square((x - y) / (1 + np.square(x - y)))))


# Define function to train XGBoost classifier
def train_xgb(X_train, y_train, params):
    clf = XGBClassifier(use_label_encoder=False, objective='binary:logistic', max_depth=params['max_depth'], learning_rate=params['learning_rate'], n_estimators=params['n_estimators'])
    clf.fit(X_train, y_train, eval_metric=lorentzian_distance)
    return clf


# Define function to train kNN classifier
def train_knn(X_train, y_train):
    clf = KNeighborsClassifier(n_neighbors=8, metric=lorentzian_distance)
    clf.fit(X_train, y_train)
    return clf


def is_order_filled(symbol, order_id):
    if order_id:
        order = exchange.fetch_order(int(order_id), symbol)  # cast order_id to int
        return order['status'] == 'closed'
    else:
        return False


def create_order(symbol, side, amount, price=None):
    try:
        if price:
            order = exchange.create_order(symbol, 'limit', side, amount, price)
        else:
            order = exchange.create_order(symbol, 'limit', side, amount)
        print(f"Order successfully placed: {order}")
        return str(order['info']['orderId'])  # cast order ID to str
    except InvalidOrder:
        print("Invalid order, check the order parameters.")
    except Exception as e:
        print(f"An error occurred while placing the order: {e}")
    return None


def grid_search_xgb(X_train, y_train, n_iter=200):
    xgb_params = {
        'max_depth': [2, 3, 4, 5, 6],
        'learning_rate': [0.1, 0.01, 0.001],
        'n_estimators': [50, 100, 150, 200],
        'min_child_weight': [1, 3, 5],
        'gamma': [0, 0.1, 0.2],
        'subsample': [0.6, 0.8, 1.0],
        'colsample_bytree': [0.6, 0.8, 1.0],
        'scale_pos_weight': [0.5, 1, 1.5]
    }
    xgb = XGBClassifier(use_label_encoder=False, objective='binary:logistic', random_state=42)
    accuracy_scorer = make_scorer(accuracy_score)
    random_search = RandomizedSearchCV(estimator=xgb, param_distributions=xgb_params, scoring=accuracy_scorer,
                                       n_iter=n_iter, cv=5, n_jobs=-1, verbose=2, random_state=42)
    random_search.fit(X_train, y_train)
    return random_search.best_params_


# Calculate the Average True Range
def calculate_atr(data, period=14):
    atr = AverageTrueRange(data['high'], data['low'], data['close'], window=period)
    return atr.average_true_range().iloc[-1]


# Define trading parameters
starting_balance = 1000
balance = starting_balance
trading_fee = 0.004
stop_loss_pct = 0.015
take_profit_pct = 0.03
buy_price = 0
wins = 0
losses = 0
max_attempts = 5

# Add a variable to keep track of the last sell time for each symbol
last_sell_time = {}

# Define the cooldown period (e.g., 1 hour)
cooldown_period = timedelta(seconds=300)

# Add a variable to keep track of the position
position_taken = {}
position = {}
atr_data = {}
prices = {}
# Add dictionaries to store the buy price, stop loss, and take profit for each symbol
buy_prices = {}
stop_losses = {}
take_profits = {}
highest_prices = {}
lowest_prices = {}
last_sale = datetime.now()

# Train models for each symbol
models = {}
best_params = {}
for symbol in symbols:
    historical_data = fetch_data(symbol, timeframe)
    X, y = preprocess_data(historical_data)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Perform Grid Search
    best_params[symbol] = grid_search_xgb(X_train, y_train)
    print(f"Best parameters for {symbol}: {best_params[symbol]}")

    # Train the model with the optimized hyperparameters
    model = train_xgb(X, y, best_params[symbol])
    models[symbol] = model

while True:
    for symbol in symbols:
        # Fetch and preprocess latest data
        latest_data = fetch_data(symbol, timeframe)
        X_latest, _ = preprocess_data(latest_data)
        X_latest = X_latest[-1].reshape(1, -1)

        # Fetch the latest ticker data
        ticker = exchange.fetch_ticker(symbol)

        # Update ticker_data for the corresponding symbol
        ticker_data[symbol] = ticker

        current_price = ticker_data[symbol]['last']

        prices[symbol] = current_price

        # Predict the market trend using the XGBoost model
        prediction = models[symbol].predict(X_latest)[0]
        print(f"prediction: {prediction} Symbol {symbol} / Current price: {prices[symbol]} | Wins: {wins} / Losses: {losses} ")

        # Check if position has been taken for this symbol
        if not position_taken.get(symbol):
            if symbol not in last_sell_time or datetime.now() - last_sell_time[symbol] > cooldown_period:
                if prediction == 1:  # Buy signal
                    buy_price = ticker_data[symbol]['last']
                    buy_prices[symbol] = buy_price
                    amount_to_buy = starting_balance / buy_prices[symbol]
                    order_id = create_order(symbol, 'buy', amount_to_buy)
                    while not is_order_filled(symbol, order_id):
                        print("Waiting for the buy order to be filled...")
                        time.sleep(8)
                    position[symbol] = amount_to_buy * (1 - trading_fee)
                    position_taken[symbol] = True
                    balance -= amount_to_buy * buy_prices[symbol] * (1 + trading_fee)
                    print('Buying:', amount_to_buy, 'Current position:', position[symbol], 'Balance:', balance)
                else:
                    delta_minutes = (datetime.now() - last_sale).seconds // 60
                    print(f"{datetime.now()} - No trade signal detected. - Time since last sale: {delta_minutes} mins")
        else:
            # Update the stop-loss and take-profit prices
            stop_loss_price = buy_prices[symbol] * (1 - stop_loss_pct)
            take_profit_price = buy_prices[symbol] * (1 + take_profit_pct)

            if prices[symbol] <= stop_loss_price or prices[symbol] >= take_profit_price:
                # Sell the position if the stop-loss or take-profit price is reached
                amount_to_sell = position[symbol] * (1 - trading_fee)
                balance += amount_to_sell * prices[symbol] * (1 - trading_fee)
                order_id = create_order(symbol, 'sell', amount_to_sell)
                attempts = 0

                while not is_order_filled(symbol, order_id) and attempts < max_attempts:
                    print(f"Waiting for the sell order to be filled... {symbol}")
                    time.sleep(8)
                    attempts += 1

                if attempts == max_attempts:
                    print(f"Unable to fill the sell order for {symbol}, trying again...")
                else:
                    position[symbol] = 0
                    position_taken[symbol] = False  # Set position taken flag to False
                    last_sell_time[symbol] = datetime.now()
                    last_sale = datetime.now()
                    profit = amount_to_sell * (prices[symbol] - buy_prices[symbol]) * (1 - trading_fee)
                    if profit > 0:
                        wins += 1
                    else:
                        losses += 1
                    balance += amount_to_sell * prices[symbol] * (1 - trading_fee)
                    print('Selling:', amount_to_sell, 'Current balance:', balance, 'Profit:', profit)
                    time.sleep(10)
            else:
                delta_minutes = (datetime.now() - last_sale).seconds // 60
                print(f"{datetime.now()} - No trade signal detected. - Time since last sale: {delta_minutes} mins")

    if datetime.now() - last_sale > timedelta(minutes=60):
        print("60 minutes since the last sale. Canceling all open orders and restarting the script.")
        for symbol in symbols:
            if position_taken[symbol]:
                amount_to_sell = position[symbol] * (1 - trading_fee)
                order_id = create_order(symbol, 'sell', amount_to_sell)
                attempts = 0
                while not is_order_filled(symbol, order_id) and attempts < max_attempts:
                    print(f"Waiting for the sell order to be filled... {symbol}")
                    time.sleep(8)
                    attempts += 1
                if attempts == max_attempts:
                    print(f"Unable to fill the sell order for {symbol}, trying again...")
                else:
                    position[symbol] = 0
                    position_taken[symbol] = False  # Set position taken flag to False
                    last_sell_time[symbol] = datetime.now()
                    highest_prices[symbol] = 0
                    lowest_prices[symbol] = 0

            elif datetime.now() - last_sale > timedelta(minutes=60) and not any(position_taken.values()):
                last_sale = datetime.now()
                restart_program()

    # Update every hour (you may adjust this based on the timeframe)
    time.sleep(0.5)
